// Slightly simplified version of http://benchmarksgame.alioth.debian.org/u64q/program.php?test=mandelbrot&lang=gcc&id=9

// The Computer Language Benchmarks Game
// http://benchmarksgame.alioth.debian.org/
//
// Contributed by Jeremy Zerfas



#include <stdint.h>
#include <stdlib.h>
#include <stdio.h>

#ifndef __GNUC__

#else
// intptr_t should be the native integer type on most sane systems.
typedef intptr_t intnative_t;
#endif

int main(){
   int argv_1 = 16000;
#ifndef __GNUC__
   int stdout = 0;
#endif
   
// This is the square of the limit that pixels will need to exceed in order to
// escape from the Mandelbrot set.
   double LIMIT_SQUARED = 4.0;
// This controls the maximum amount of iterations that are done for each pixel.
   int MAXIMUM_ITERATIONS = 50;
   
   // Ensure image_Width_And_Height are multiples of 8.
   int image_Width_And_Height=(argv_1+7)/8*8;

   // The image will be black and white with one bit for each pixel. Bits with
   // a value of zero are white pixels which are the ones that "escape" from
   // the Mandelbrot set. We'll be working on one line at a time and each line
   // will be made up of pixel groups that are eight pixels in size so each
   // pixel group will be one byte. This allows for some more optimizations to
   // be done.
   int pixels[image_Width_And_Height*
     image_Width_And_Height/8];

   // Precompute the initial real and imaginary values for each x and y
   // coordinate in the image.
   double initial_r[image_Width_And_Height], initial_i[image_Width_And_Height];
   #pragma omp parallel for
   for(int xy=0; xy<image_Width_And_Height; xy++){
      initial_r[xy]=2.0/image_Width_And_Height*xy - 1.5;
      initial_i[xy]=2.0/image_Width_And_Height*xy - 1.0;
      //printf("initial values for %d: %f, %f\n", xy, initial_r[xy], initial_i[xy]);
   }
   
   double pixel_Group_r[8], pixel_Group_i[8];
         
   #pragma omp parallel for schedule(guided)
   for(int y=0; y<image_Width_And_Height; y++){
      double prefetched_Initial_i=initial_i[y];
      for(int x_Major=0; x_Major<image_Width_And_Height; x_Major+=8){
         //printf("pixel %d,%d\n",x_Major,y);
         // pixel_Group_r and pixel_Group_i will store real and imaginary
         // values for each pixel in the current pixel group as we perform
         // iterations. Set their initial values here.
         for(int x_Minor=0; x_Minor<8; x_Minor++){
            pixel_Group_r[x_Minor]=initial_r[x_Major+x_Minor];
            pixel_Group_i[x_Minor]=prefetched_Initial_i;
         }

         // Assume all pixels are in the Mandelbrot set initially.
         int eight_Pixels=0xff;

         int iteration=MAXIMUM_ITERATIONS;
         do{
            int current_Pixel_Bitmask=0x80;
            for(int x_Minor=0; x_Minor<8; x_Minor++){
               double r=pixel_Group_r[x_Minor];
               double i=pixel_Group_i[x_Minor];

               //printf("B %f %f\n", pixel_Group_r[x_Minor], pixel_Group_i[x_Minor]);
               pixel_Group_r[x_Minor]=r*r - i*i +
                 initial_r[x_Major+x_Minor];
               pixel_Group_i[x_Minor]=2.0*r*i + prefetched_Initial_i;
               //printf("A %f %f\n", pixel_Group_r[x_Minor], pixel_Group_i[x_Minor]);

               // Clear the bit for the pixel if it escapes from the
               // Mandelbrot set.
               //printf("%f > %f ?\n", r*r + i*i, LIMIT_SQUARED);
               if(r*r + i*i>LIMIT_SQUARED) {
                  //printf("inside the if!\n");
                  eight_Pixels&=~current_Pixel_Bitmask;
               }

               current_Pixel_Bitmask>>=1;
               //printf("current bitmask: %d\n", current_Pixel_Bitmask);
            }
            //printf("eight_Pixels: %d, iteration: %d\n", eight_Pixels, --iteration);
            //++iteration;
         } while(eight_Pixels && --iteration);

         pixels[y*image_Width_And_Height/8 + x_Major/8]=eight_Pixels;
      }
   }

   // Output the image to stdout.
   printf("P4\n%jd %jd\n", image_Width_And_Height, image_Width_And_Height);
   fwrite(pixels, image_Width_And_Height*image_Width_And_Height/8, 1, stdout);

   return 0;
}
